function run_cht_stages(I)

INITIAL_R = 10;



if size(I,3) ~= 1
    Img = I(:,:,1);
else
    Img = I;
end



clf
gcf = figure;    % bring to top

vpnl = uipanel(gcf, 'Visible','off','Position',[0 0 0.2 0.4]);
tpnl = uipanel(gcf, 'Visible','off','Position',[0 0.4 0.2 0.3]);
bg = uibuttongroup('Visible','off',...
                  'Position',[0 0.7 .2 0.3],...
                  'SelectionChangedFcn',@bselection);
              
lbl_dsample = uicontrol(vpnl, ...
        'Style', 'text', ...
        'Units',  'norm', ...
        'Position', [0.05 0.7 0.2 0.2], ...
        'HorizontalAlignment', 'right', ...
        'String', 'Rate' ...
    );

lbl_blur_sigma = uicontrol(vpnl, ...
        'Style', 'text', ...
        'Units',  'norm', ...
        'Position', [0.05 0.5 0.2 0.2], ...
        'HorizontalAlignment', 'right', ...
        'String', 'Sigma' ...
    );

lbl_blur_len = uicontrol(vpnl, ...
        'Style', 'text', ...
        'Units',  'norm', ...
        'Position', [0.5 0.5 0.2 0.2], ...
        'HorizontalAlignment', 'right', ...
        'String', 'Kernel Size' ...
    );



lbl_edges_sigma = uicontrol(vpnl, ...
        'Style', 'text', ...
        'Units',  'norm', ...
        'Position', [0.05 0.3 0.2 0.2], ...
        'HorizontalAlignment', 'right', ...
        'String', 'Sigma' ...
    );

lbl_edges_len = uicontrol(vpnl, ...
        'Style', 'text', ...
        'Units',  'norm', ...
        'Position', [0.5 0.3 0.2 0.2], ...
        'HorizontalAlignment', 'right', ...
        'String', 'Kernel Size' ...
    );

lbl_edges_th0 = uicontrol(vpnl, ...
        'Style', 'text', ...
        'Units',  'norm', ...
        'Position', [0.05 0.2 0.2 0.1], ...
        'HorizontalAlignment', 'right', ...
        'String', 'Thr Low' ...
    );

lbl_edges_th1 = uicontrol(vpnl, ...
        'Style', 'text', ...
        'Units',  'norm', ...
        'Position', [0.5 0.2 0.2 0.1], ...
        'HorizontalAlignment', 'right', ...
        'String', 'Thr High' ...
    );


lbl_cht_radius = uicontrol(vpnl, ...
        'Style', 'text', ...
        'Units',  'norm', ...
        'Position', [0.05 0.05 0.2 0.1], ...
        'HorizontalAlignment', 'right', ...
        'String', 'Radius' ...
    );

lbl_cht_thp = uicontrol(vpnl, ...
        'Style', 'text', ...
        'Units',  'norm', ...
        'Position', [0.5 0.05 0.2 0.1], ...
        'HorizontalAlignment', 'right', ...
        'String', 'Accuracy' ...
    );

ud_dsample.pr = 2;
tb_dsample = uicontrol(vpnl, ...
        'Style', 'edit', ...
        'Units',  'norm', ...
        'Position', [0.25 0.8 0.2 0.1], ...
        'background', [1 1 1], ...
        'HorizontalAlignment', 'center', ...
        'Tag', 'tb_dsample',...
        'UserData',ud_dsample,...
        'String', num2str(ud_dsample.pr), ...
        'Callback', @dsample_callback );

ud_blur_sigma.pr = 5;
tb_blur_sigma = uicontrol(vpnl, ...
        'Style', 'edit', ...
        'Units',  'norm', ...
        'Position', [0.25 0.6 0.2 0.1], ...
        'background', [1 1 1], ...
        'HorizontalAlignment', 'center', ...
        'Tag', 'tb_blur_sigma',...
        'UserData',ud_blur_sigma,...
        'String', num2str(ud_blur_sigma.pr), ...
        'Callback', @blur_sigma_callback );

ud_blur_len.pr = 7;
tb_blur_len = uicontrol(vpnl, ...
        'Style', 'edit', ...
        'Units',  'norm', ...
        'Position', [0.7 0.6 0.2 0.1], ...
        'background', [1 1 1], ...
        'HorizontalAlignment', 'center', ...
        'Tag', 'tb_blur_len',...
        'UserData',ud_blur_len,...
        'String', num2str(ud_blur_len.pr), ...
        'Callback', @blur_len_callback );
    
ud_edges_sigma.pr = 2;
tb_edges_sigma = uicontrol(vpnl, ...
        'Style', 'edit', ...
        'Units',  'norm', ...
        'Position', [0.25 0.4 0.2 0.1], ...
        'background', [1 1 1], ...
        'HorizontalAlignment', 'center', ...
        'Tag', 'tb_edges_sigma',...
        'UserData',ud_edges_sigma,...
        'String', num2str(ud_edges_sigma.pr), ...
        'Callback', @edges_sigma_callback );
    
ud_edges_len.pr = 7;
tb_edges_len = uicontrol(vpnl, ...
        'Style', 'edit', ...
        'Units',  'norm', ...
        'Position', [0.7 0.4 0.2 0.1], ...
        'background', [1 1 1], ...
        'HorizontalAlignment', 'center', ...
        'Tag', 'tb_edges_len',...
        'UserData',ud_edges_len,...
        'String', num2str(ud_edges_len.pr), ...
        'Callback', @edges_len_callback );
    
    ud_edges_th0.pr = 0.1;
tb_edges_th0 = uicontrol(vpnl, ...
        'Style', 'edit', ...
        'Units',  'norm', ...
        'Position', [0.25 0.25 0.2 0.1], ...
        'background', [1 1 1], ...
        'HorizontalAlignment', 'center', ...
        'Tag', 'tb_edges_th0',...
        'UserData',ud_edges_th0,...
        'String', num2str(ud_edges_th0.pr), ...
        'Callback', @edges_th0_callback );
    
    ud_edges_th1.pr = 0.5;
tb_edges_th1 = uicontrol(vpnl, ...
        'Style', 'edit', ...
        'Units',  'norm', ...
        'Position', [0.7 0.25 0.2 0.1], ...
        'background', [1 1 1], ...
        'HorizontalAlignment', 'center', ...
        'Tag', 'ud_edges_th1',...
        'UserData',ud_edges_th1,...
        'String', num2str(ud_edges_th1.pr), ...
        'Callback', @edges_th1_callback );
    
ud_cht_radius.pr = INITIAL_R;
tb_cht_radius = uicontrol(vpnl, ...
        'Style', 'edit', ...
        'Units',  'norm', ...
        'Position', [0.25 0.05 0.2 0.1], ...
        'background', [1 1 1], ...
        'HorizontalAlignment', 'center', ...
        'Tag', 'tb_cht_radius',...
        'UserData',ud_cht_radius,...
        'String', num2str(ud_cht_radius.pr), ...
        'Callback', @cht_radius_callback );

ud_cht_thp.pr = 0.9;
tb_cht_thp = uicontrol(vpnl, ...
    'Style', 'edit', ...
    'Units',  'norm', ...
    'Position', [0.7 0.05 0.2 0.1], ...
    'background', [1 1 1], ...
    'HorizontalAlignment', 'center', ...
    'Tag', 'tb_cht_thp',...
    'UserData',ud_cht_thp,...
    'String', num2str(ud_cht_thp.pr), ...
    'Callback', @cht_thp_callback );


redrawbutton = uicontrol(vpnl, ...
        'style', 'pushbutton', ...
        'units',  'norm', ...
        'pos', [.6 .75 .4 .25], ...
        'callback', @redrawbutton_callback, ...
        'string', 'Update Image' ...
        );

tg_noblur = uicontrol(tpnl,...
    'Style', 'togglebutton',...
    'units','norm',...
    'Position',[0.05 0.05 .4 .4],...
    'callback', @noblur_callback,...
    'Max',1,'Min',0,...
    'String','Disable Blur',...
    'Value',0);

tg_noblur = uicontrol(tpnl,...
    'Style', 'togglebutton',...
    'units','norm',...
    'Position',[0.05 0.55 .4 .4],...
    'callback', @nocht_callback,...
    'Max',1,'Min',0,...
    'String','Disable CHT',...
    'Value',0);

tg_showcircles = uicontrol(tpnl,...
    'Style', 'togglebutton',...
    'units','norm',...
    'Position',[0.55 0.05 .4 .4],...
    'callback', @showcircles_callback,...
    'Max',1,'Min',0,...
    'String','Show Circles',...
    'Value',0);

tg_edgemethod = uicontrol(tpnl,...
    'Style', 'togglebutton',...
    'units','norm',...
    'Position',[0.55 0.55 .4 .4],...
    'callback', @edgemethod_callback,...
    'Max',1,'Min',0,...
    'String','Custom Edge Method',...
    'Value',0);




% Create three radio buttons in the button group.
r1 = uicontrol(bg,'Style',...
                  'radiobutton',...
                  'String','Input Image',...
                  'Tag','source',...
                  'units',  'norm', ...
                  'Position',[0.05 .90 .95 .15],...
                  'HandleVisibility','off');
              
r2 = uicontrol(bg,'Style','radiobutton',...
                  'String','Downsampled Image',...
                  'Tag','downsample',...
                  'units',  'norm', ...
                  'Position',[0.05 .70 .95 .15],...
                  'HandleVisibility','off');

r3 = uicontrol(bg,'Style','radiobutton',...
                  'String','Smoothed Image',...
                  'Tag','blur',...
                  'units',  'norm', ...
                  'Position',[0.05 .50 .95 .15 ],...
                  'HandleVisibility','off');
              
r4 = uicontrol(bg,'Style','radiobutton',...
                  'String','Edge Image',...
                  'Tag','edges',...
                  'units',  'norm', ...
                  'Position',[0.05 .30 .95 .15],...
                  'HandleVisibility','off');

 r5 = uicontrol(bg,'Style','radiobutton',...
      'String','CHT Accumulator',...
      'Tag','cht',...
      'units',  'norm', ...
      'Position',[0.05 .10 .95 .15],...
      'HandleVisibility','off');

vpnl.Visible='on';
bg.Visible='on';
tpnl.Visible='on';
imshow(Img);
    
%
IMG_CLEAN='img_clean';
IMG_DSAMPLE='img_dsample';
IMG_BLUR='img_blur';
IMG_EDGES='img_edges';
IMG_CHT='img_cht';
setappdata(gcf,IMG_CLEAN,Img);
setappdata(gcf,IMG_DSAMPLE,[]);
setappdata(gcf,IMG_BLUR,[]);
setappdata(gcf,IMG_EDGES,[]);
setappdata(gcf,IMG_CHT,[]);

setappdata(gcf,'dsample_rate',ud_dsample.pr);
setappdata(gcf,'blur_sigma',ud_blur_sigma.pr);
setappdata(gcf,'blur_len',ud_blur_len.pr);
setappdata(gcf,'edges_sigma',ud_edges_sigma.pr);
setappdata(gcf,'edges_len',ud_edges_len.pr);
setappdata(gcf,'cht_radius',ud_cht_radius.pr);
setappdata(gcf,'cht_thp',ud_cht_thp.pr);
setappdata(gcf,'edges_th0',ud_edges_th0.pr);
setappdata(gcf,'edges_th1',ud_edges_th1.pr);

setappdata(gcf,'dsample_needupdate',1);
setappdata(gcf,'blur_needupdate',1);
setappdata(gcf,'edges_needupdate',1);
setappdata(gcf,'cht_needupdate',1);
setappdata(gcf,'circles_needupdate',1);

setappdata(gcf,'sel_stage','clean');
setappdata(gcf,'disable_blur',0);
setappdata(gcf,'disable_cht',0);
setappdata(gcf,'en_showcircles',0);
setappdata(gcf,'en_usecustomedges',0);

set(gcf, 'name', 'run_cht_stages');


end

function [value] = callback_helper(obj,str_varname, str_update)
    value = str2double(get(obj,'String'));
    if ~isnan(value)
        ud = get(obj,'UserData');
        if ud.pr ~= value;
            ud.pr = value;
            set(obj,'UserData',ud);
            setappdata(obj.Parent.Parent,str_varname,value);
            update = 1;
        else
            update = 0;
        end
    else
        set(obj,'String','NaN');
        update = 0;
    end
    
    if update
        setappdata(obj.Parent.Parent, str_update,1);
    end
end

function update_imshow(obj,tag)
    if strcmp(tag,'source');
        img=getappdata(obj,'img_clean');
    elseif strcmp(tag,'downsample');
        img = getappdata(obj,'img_dsample');
    elseif strcmp(tag,'blur');
        img = getappdata(obj,'img_blur');
    elseif strcmp(tag,'edges');
        img = getappdata(obj,'img_edges');
    elseif strcmp(tag,'cht');
        % cht accumulator is 16-bit.  convert to double for imshow
        img = cast(getappdata(obj,'img_cht'),'double');
        r = getappdata(obj,'cht_radius');
        circumference_px = 2*(2*r+1);
        img = img./circumference_px;
    else
        img = [];
    end

    sc = getappdata(obj,'en_showcircles');
    
    wait_circles=getappdata(obj,'circles_needupdate');
    cht_disabled = getappdata(obj,'disable_cht');
    if 0 == sc || 1 == wait_circles || 1 == cht_disabled
        imshow(img);
    else
        r = getappdata(obj,'cht_radius');
        if strcmp(tag,'cht')
            icht = img;
        else
            icht = cast(getappdata(obj,'img_cht'),'double');
            circumference_px = 2*(2*r+1);
            icht = icht./circumference_px;
        end
        
        thp = getappdata(obj,'cht_thp');
        [ylist,xlist] = find(icht >= thp);
        
        if strcmp(tag,'source')
            rate = getappdata(obj,'dsample_rate');
            r = r*rate;
            ylist = ylist .* rate;
            xlist = xlist .* rate;
        end
        
        img_circles = img;
        for i=1:length(ylist)
            
            img_circles = draw_circle2(img_circles,ylist(i),xlist(i),r,255);
        end
        
        imshow(cat(3,img_circles,img,img));
    end
    
end


function process_images(app)
    ds_rate = round(getappdata(app,'dsample_rate'));
    b_sigma=getappdata(app,'blur_sigma');
    b_len=getappdata(app,'blur_len');
    e_sigma=getappdata(app,'edges_sigma');
    e_len=getappdata(app,'edges_len');
    e_th0=getappdata(app,'edges_th0');
    e_th1=getappdata(app,'edges_th1');
    c_radius=getappdata(app,'cht_radius');
    
    new_dsample=getappdata(app,'dsample_needupdate');
    new_blur=getappdata(app,'blur_needupdate');
    new_edges=getappdata(app,'edges_needupdate');
    new_cht=getappdata(app,'cht_needupdate');
    
    disable_blur = getappdata(app,'disable_blur');
    disable_cht = getappdata(app,'disable_cht');
    
    if new_dsample
        set_downsample(app,ds_rate);
        if 0 == disable_blur
            set_blur(app,b_sigma,b_len);
        else
            setappdata(app,'img_blur',getappdata(app,'img_dsample'));
        end
        
        set_edges(app,e_sigma,e_len,e_th0,e_th1);
        
        if 0 == disable_cht
            set_cht(app,c_radius);
        else
            setappdata(app,'img_cht',[]);
        end
    elseif new_blur
        if 0 == disable_blur
            set_blur(app,b_sigma,b_len);
        else
            setappdata(app,'img_blur',getappdata(app,'img_dsample'));
        end
        set_edges(app,e_sigma,e_len,e_th0,e_th1);
        if 0 == disable_cht
            set_cht(app,c_radius);
        else
            setappdata(app,'img_cht',[]);
        end
    elseif new_edges
        set_edges(app,e_sigma,e_len,e_th0,e_th1);
        if 0 == disable_cht
            set_cht(app,c_radius);
        end
    elseif new_cht
        if 0 == disable_cht
            set_cht(app,c_radius);
        else
            setappdata(app,'img_cht',[]);
        end
    end
    
    
    setappdata(app,'dsample_needupdate',0);
    setappdata(app,'blur_needupdate',0);
    setappdata(app,'edges_needupdate',0);
    setappdata(app,'cht_needupdate',0);
    setappdata(app,'circles_needupdate',0);
end

function noblur_callback(obj,event)
    val=get(obj,'Value');
    setappdata(obj.Parent.Parent,'disable_blur',val);
    setappdata(obj.Parent.Parent, 'blur_needupdate',1);
end

function nocht_callback(obj,event)
    val=get(obj,'Value');
    setappdata(obj.Parent.Parent,'disable_cht',val);
    setappdata(obj.Parent.Parent, 'cht_needupdate',1);
end

function showcircles_callback(obj,event)
    val=get(obj,'Value');
    setappdata(obj.Parent.Parent,'en_showcircles',val);
    setappdata(obj.Parent.Parent,'circles_needupdate',1);
end

function edgemethod_callback(obj, events)
    val=get(obj,'Value');
    setappdata(obj.Parent.Parent,'en_usecustomedges',val);
    setappdata(obj.Parent.Parent,'edges_needupdate',1);
end

function bselection(obj,events)
    tag = events.NewValue.Tag;
    setappdata(obj.Parent,'sel_stage',tag);
    update_imshow(obj.Parent,tag);
end

function redrawbutton_callback(obj,events)
    panel = obj.Parent;
    process_images(panel.Parent);
    
    tag = getappdata(panel.Parent,'sel_stage');
    update_imshow(panel.Parent,tag);
end



function dsample_callback(obj, events)
    [rate] = callback_helper(obj,'dsample_rate','dsample_needupdate');
    rate = round(rate);
end

function blur_sigma_callback(obj, events)
    [sigma] = callback_helper(obj,'blur_sigma','blur_needupdate');
end

function blur_len_callback(obj, events)
    [len] = callback_helper(obj,'blur_len','blur_needupdate');
end

function edges_sigma_callback(obj, events)
    [sigma] = callback_helper(obj,'edges_sigma','edges_needupdate');
end

function edges_len_callback(obj, events)
    [len] = callback_helper(obj,'edges_len','edges_needupdate');
end

function edges_th0_callback(obj,events)
    th0 = callback_helper(obj,'edges_th0','edges_needupdate');
end

function edges_th1_callback(obj,events)
    th1 = callback_helper(obj,'edges_th1','edges_needupdate');
end

function cht_radius_callback(obj, events)
    [radius] = callback_helper(obj,'cht_radius','cht_needupdate');
end

function cht_thp_callback(obj, events)
    [radius] = callback_helper(obj,'cht_thp','circles_needupdate');
end



function [I_out] = set_downsample(app, rate)
    I = getappdata(app,'img_clean');
    I_out = downsample(I,rate);
    setappdata(app,'img_dsample',I_out);
end

function set_blur(app, sigma, kernlen)
    I = getappdata(app,'img_dsample');
    I_out = gaussian_blur(I,sigma,kernlen);
    setappdata(app,'img_blur',I_out);
end

function set_edges(app, sigma, kernlen,th_low,th_high)
    I = getappdata(app,'img_blur');
    if 0 ~= getappdata(app,'en_usecustomedges');
        I_out = canny_edge_detect(I,sigma,kernlen,th_low,th_high);
    else
        I_out = edge(I,'Canny');
    end
    setappdata(app,'img_edges',I_out);
end

function set_cht(app, radius)
    I = getappdata(app,'img_edges');
    I_out = circle_hough_transform(I,radius);
    setappdata(app,'img_cht',I_out);
end

